# -*- coding: utf-8 -*-
"""Untitled21.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19W4CsPlEjoDgQmDc9T5UU15VAIU81cjy
"""

# %% [markdown]
# # Self-Directed Learning Assistant
#
# This system helps you learn any topic through personalized, research-based content.

# %%
# Install required packages
!pip install faker matplotlib graphviz markdown
!apt-get -qq install -y graphviz

# %%
import json
import random
from faker import Faker
import matplotlib.pyplot as plt
import networkx as nx
from IPython.display import display, Markdown, HTML
import textwrap
from collections import defaultdict
import time

# Initialize faker for generating fake content
fake = Faker()

# %% [markdown]
# ## Step 1: Topic and Objectives Input

# %%
def get_user_input():
    """Collect learning topic and objectives from user"""
    print("Welcome to the Self-Directed Learning Assistant!")
    print("Please provide the following information to personalize your learning experience:\n")

    topic = input("1. What topic would you like to learn about? (e.g., Quantum Physics, Python Programming, Art History): ")
    objectives = input("2. What are your learning objectives? (e.g., Understand basics, Prepare for exam, Research paper): ")

    return topic, objectives

# %%
# Collect initial input
topic, objectives = get_user_input()

# %% [markdown]
# ## Step 2: Interactive Questioning System

# %%
def conduct_interview(topic, objectives):
    """Clarify user's specific interests, prior knowledge, and preferences"""
    responses = {
        'topic': topic,
        'objectives': objectives
    }

    print("\nLet me ask a few questions to better tailor your learning experience:")

    # Prior knowledge assessment
    knowledge_level = input(f"\n1. On a scale from 1-5, how familiar are you with {topic}? (1=Novice, 5=Expert): ")
    while not knowledge_level.isdigit() or int(knowledge_level) < 1 or int(knowledge_level) > 5:
        knowledge_level = input("Please enter a number between 1 and 5: ")
    responses['knowledge_level'] = int(knowledge_level)

    # Specific interests
    print(f"\n2. What specific aspects of {topic} interest you most?")
    print("   (You can list keywords or phrases, separated by commas)")
    interests = input("   Your interests: ").split(',')
    responses['interests'] = [i.strip() for i in interests if i.strip()]

    # Learning preferences
    print("\n3. What learning formats do you prefer? (Select all that apply, separated by commas)")
    print("   - Text explanations")
    print("   - Diagrams/visualizations")
    print("   - Step-by-step examples")
    print("   - Video content")
    print("   - Interactive exercises")
    preferences = input("   Your preferences: ").lower().split(',')
    responses['preferences'] = [p.strip() for p in preferences if p.strip()]

    # Depth of coverage
    depth = input("\n4. How in-depth do you want the coverage? (basic, intermediate, advanced, expert): ").lower()
    while depth not in ['basic', 'intermediate', 'advanced', 'expert']:
        depth = input("Please enter one of: basic, intermediate, advanced, expert: ").lower()
    responses['depth'] = depth

    # Time availability
    time_avail = input("\n5. How much time do you want to spend on this topic? (e.g., 1 hour, 3 days, 1 week): ")
    responses['time_avail'] = time_avail

    return responses

# %%
# Conduct the interactive interview
user_profile = conduct_interview(topic, objectives)

# Preview collected information
print("\nCollected User Profile:")
for key, value in user_profile.items():
    print(f"- {key.replace('_', ' ').title()}: {value}")

# %% [markdown]
# ## Step 3: Simulated Research Engine

# %%
class ResearchSimulator:
    """Simulates research from various sources based on user profile"""

    def __init__(self, user_profile):
        self.user_profile = user_profile
        self.sources = {
            'web': self._generate_web_content,
            'videos': self._generate_video_content,
            'academic': self._generate_academic_content
        }
        self.research_results = defaultdict(list)

    def _generate_web_content(self):
        """Generate simulated web content"""
        num_results = random.randint(3, 7)
        for _ in range(num_results):
            title = fake.sentence(nb_words=6).replace('.', '')
            url = fake.url()
            snippet = fake.paragraph(nb_sentences=3)
            content = '\n\n'.join(fake.paragraphs(nb=random.randint(2, 5)))

            # Tailor content to user interests
            if user_profile['interests']:
                interest = random.choice(user_profile['interests'])
                snippet = f"{interest}: {snippet}"
                content = f"This content focuses on {interest}.\n\n{content}"

            self.research_results['web'].append({
                'title': title,
                'url': url,
                'snippet': snippet,
                'content': content,
                'source_type': 'web'
            })

    def _generate_video_content(self):
        """Generate simulated video content"""
        num_results = random.randint(2, 5)
        for _ in range(num_results):
            title = fake.sentence(nb_words=5).replace('.', '')
            url = "https://youtube.com/watch?v=" + fake.sha1()[:11]
            channel = fake.company()
            transcript = '\n\n'.join(fake.paragraphs(nb=random.randint(5, 10)))

            # Add timestamps to simulate transcript
            lines = transcript.split('\n')
            transcript_with_timestamps = []
            time_sec = 0
            for line in lines:
                transcript_with_timestamps.append(f"[{time_sec//60:02d}:{time_sec%60:02d}] {line}")
                time_sec += random.randint(5, 20)

            self.research_results['videos'].append({
                'title': title,
                'url': url,
                'channel': channel,
                'transcript': '\n'.join(transcript_with_timestamps),
                'source_type': 'video'
            })

    def _generate_academic_content(self):
        """Generate simulated academic content"""
        num_results = random.randint(1, 4)
        for _ in range(num_results):
            title = fake.sentence(nb_words=8).replace('.', '')
            authors = ', '.join([fake.name() for _ in range(random.randint(1, 3))])
            journal = fake.random_element(elements=(
                "Journal of Advanced Learning",
                "International Education Review",
                "Computers & Education",
                "Science of Learning"
            ))
            abstract = '\n'.join(fake.paragraphs(nb=2))
            year = random.randint(2015, 2023)
            doi = f"10.1234/{fake.sha1()[:10]}"

            # Generate sections for paper
            sections = {
                "Introduction": '\n\n'.join(fake.paragraphs(nb=3)),
                "Methods": '\n\n'.join(fake.paragraphs(nb=4)),
                "Results": '\n\n'.join(fake.paragraphs(nb=5)),
                "Discussion": '\n\n'.join(fake.paragraphs(nb=3))
            }

            # Highlight user interests in abstract
            if user_profile['interests']:
                interest = random.choice(user_profile['interests'])
                abstract = f"This paper addresses {interest} in {user_profile['topic']}.\n\n{abstract}"

            self.research_results['academic'].append({
                'title': title,
                'authors': authors,
                'journal': journal,
                'year': year,
                'doi': doi,
                'abstract': abstract,
                'sections': sections,
                'source_type': 'academic'
            })

    def conduct_research(self):
        """Conduct research from all available sources"""
        print(f"\nResearching '{user_profile['topic']}' across multiple sources...")

        # Simulate research time
        time.sleep(2)

        for source_name, research_fn in self.sources.items():
            research_fn()
            print(f"- Collected {len(self.research_results[source_name])} {source_name} resources")

        print("\nResearch complete! Analyzing and organizing content...")
        time.sleep(1)

        return self.research_results

# %%
# Conduct simulated research
research_simulator = ResearchSimulator(user_profile)
research_results = research_simulator.conduct_research()

# %% [markdown]
# ## Step 4: Content Organization and Structuring

# %%
class LearningContentOrganizer:
    """Organizes research content into a structured learning path"""

    def __init__(self, research_results, user_profile):
        self.research_results = research_results
        self.user_profile = user_profile
        self.learning_path = []
        self.key_concepts = []

    def _generate_key_concepts(self):
        """Identify key concepts based on research"""
        topic = self.user_profile['topic']

        # Base concepts that would apply to most topics
        base_concepts = [
            f"Introduction to {topic}",
            f"History and Background of {topic}",
            f"Key Principles in {topic}",
            f"Current Applications of {topic}",
            f"Future Directions in {topic}"
        ]

        # Add user-specific concepts based on interests
        interest_concepts = []
        for interest in self.user_profile['interests']:
            interest_concepts.extend([
                f"{interest} in {topic}",
                f"How {topic} relates to {interest}",
                f"Advanced concepts in {interest} and {topic}"
            ])

        # Select concepts based on knowledge level and depth
        num_concepts = {
            'basic': 5,
            'intermediate': 8,
            'advanced': 12,
            'expert': 15
        }[self.user_profile['depth']]

        self.key_concepts = base_concepts + interest_concepts
        random.shuffle(self.key_concepts)
        self.key_concepts = self.key_concepts[:num_concepts]

        # Sort with introduction first
        intro = next(c for c in self.key_concepts if c.startswith("Introduction"))
        self.key_concepts.remove(intro)
        self.key_concepts.insert(0, intro)

    def _create_learning_modules(self):
        """Create structured learning modules from concepts and research"""
        self._generate_key_concepts()

        for i, concept in enumerate(self.key_concepts):
            module = {
                'title': concept,
                'order': i + 1,
                'content': [],
                'resources': [],
                'visualization': None
            }

            # Add content based on research results
            for source_type, items in self.research_results.items():
                if items:
                    # Select 1-2 relevant items per source
                    selected = random.sample(items, min(2, len(items)))
                    for item in selected:
                        module['resources'].append(item)

                        # Extract relevant content
                        if source_type == 'academic':
                            summary = f"According to {item['authors']} ({item['year']}) in {item['journal']}:\n\n"
                            summary += item['abstract'] + "\n\nKey findings:\n- " + "\n- ".join(fake.sentences(nb=3))
                            module['content'].append(summary)
                        elif source_type == 'videos':
                            summary = f"Video resource: {item['title']} by {item['channel']}\n\n"
                            transcript_lines = item['transcript'].split('\n')
                            summary += "Transcript excerpts:\n" + "\n".join(random.sample(transcript_lines, 5))
                            module['content'].append(summary)
                        else:  # web
                            summary = f"Web resource: {item['title']}\n\n{item['snippet']}\n\n"
                            summary += "Key points:\n- " + "\n- ".join(fake.sentences(nb=3))
                            module['content'].append(summary)

            # Add generated explanations
            explanation = f"### Explanation of {concept}\n\n"
            explanation += '\n\n'.join(fake.paragraphs(nb=random.randint(2, 4)))

            # Add example if requested
            if 'step-by-step examples' in self.user_profile['preferences']:
                explanation += f"\n\n#### Example: {fake.sentence(nb_words=6).replace('.', '')}\n\n"
                explanation += "1. " + "\n2. ".join(fake.sentences(nb=3)) + "\n3. " + fake.sentence()

            module['content'].insert(0, explanation)

            # Add visualization if requested
            if 'diagrams/visualizations' in self.user_profile['preferences']:
                module['visualization'] = self._generate_visualization(concept)

            self.learning_path.append(module)

    def _generate_visualization(self, concept):
        """Generate a simple visualization for a concept"""
        try:
            plt.figure(figsize=(8, 4))

            # Different visualization types based on concept
            if 'Introduction' in concept:
                # Timeline visualization
                years = sorted([random.randint(1900, 2023) for _ in range(5)])
                events = [fake.sentence(nb_words=5).replace('.', '') for _ in years]

                plt.plot(years, range(len(years)), 'o-')
                for i, (year, event) in enumerate(zip(years, events)):
                    plt.text(year, i, f" {event}", va='center')
                plt.title(f"Historical Development: {concept}")
                plt.xlabel("Year")
                plt.yticks([])

            elif 'Principles' in concept or 'Key' in concept:
                # Network graph
                G = nx.DiGraph()
                main_node = concept.split(' in ')[0] if ' in ' in concept else concept
                G.add_node(main_node)

                for _ in range(5):
                    node = fake.word().title()
                    G.add_node(node)
                    G.add_edge(main_node, node)

                pos = nx.spring_layout(G)
                nx.draw(G, pos, with_labels=True, node_size=2000, node_color='skyblue')
                plt.title(f"Related Concepts: {concept}")

            else:
                # Bar chart
                components = [fake.word().title() for _ in range(4)]
                values = [random.randint(3, 10) for _ in components]

                plt.bar(components, values, color=['#ff9999','#66b3ff','#99ff99','#ffcc99'])
                plt.title(f"Components of {concept}")

            plt.tight_layout()
            return plt
        except:
            return None

    def organize_content(self):
        """Organize all content into a learning path"""
        self._create_learning_modules()
        return self.learning_path

# %%
# Organize the research content
organizer = LearningContentOrganizer(research_results, user_profile)
learning_path = organizer.organize_content()

# %% [markdown]
# ## Step 5: Report Generation

# %%
class LearningReportGenerator:
    """Generates comprehensive learning reports"""

    def __init__(self, learning_path, user_profile):
        self.learning_path = learning_path
        self.user_profile = user_profile
        self.report = ""

    def _generate_header(self):
        """Generate report header with user info"""
        header = f"# Personalized Learning Report: {self.user_profile['topic']}\n\n"
        header += f"**Prepared for**: {fake.name()} (Knowledge level: {self.user_profile['knowledge_level']}/5)\n\n"
        header += f"**Learning objectives**: {self.user_profile['objectives']}\n\n"
        header += f"**Preferred formats**: {', '.join(self.user_profile['preferences'])}\n\n"
        header += f"**Recommended study time**: {self.user_profile['time_avail']}\n\n"
        header += "---\n\n"
        return header

    def _generate_toc(self):
        """Generate table of contents"""
        toc = "## Table of Contents\n\n"
        for module in self.learning_path:
            toc += f"{module['order']}. [{module['title']}](#{module['title'].lower().replace(' ', '-')})\n"
        toc += "\n---\n\n"
        return toc

    def _generate_module_content(self, module):
        """Generate content for a single module"""
        content = f"## {module['order']}. {module['title']}\n\n"

        # Add text content
        for text in module['content']:
            content += text + "\n\n"

        # Add visualization if exists
        if module['visualization']:
            content += "### Visualization\n\n"
            module['visualization'].savefig(f"module_{module['order']}.png", bbox_inches='tight')
            content += f"![{module['title']} visualization](module_{module['order']}.png)\n\n"
            plt.close()

        # Add resources
        if module['resources']:
            content += "### Recommended Resources\n\n"
            for resource in module['resources']:
                if resource['source_type'] == 'academic':
                    content += f"- **Academic Paper**: {resource['title']} by {resource['authors']} ({resource['year']}). {resource['journal']}. [DOI:{resource['doi']}]\n"
                elif resource['source_type'] == 'video':
                    content += f"- **Video**: [{resource['title']}]({resource['url']}) by {resource['channel']}\n"
                else:  # web
                    content += f"- **Web Article**: [{resource['title']}]({resource['url']})\n"

        content += "\n---\n\n"
        return content

    def _generate_footer(self):
        """Generate report footer with summary and next steps"""
        footer = "## Summary and Next Steps\n\n"
        footer += f"Congratulations on completing your learning plan for {self.user_profile['topic']}!\n\n"

        # Recommend next steps based on objectives
        if 'exam' in self.user_profile['objectives'].lower():
            footer += "Since you're preparing for an exam, consider these next steps:\n"
            footer += "- Create flashcards for key concepts\n"
            footer += "- Take practice tests on this material\n"
            footer += "- Review challenging areas with a study group\n"
        elif 'research' in self.user_profile['objectives'].lower():
            footer += "For your research purposes, you might want to:\n"
            footer += "- Explore the cited academic papers in more depth\n"
            footer += "- Look for recent developments in this field\n"
            footer += "- Consider how this topic connects to your broader research\n"
        else:  # general learning
            footer += "To continue your learning journey:\n"
            footer += "- Apply these concepts to real-world situations\n"
            footer += "- Teach what you've learned to someone else\n"
            footer += "- Explore related topics that interest you\n"

        footer += "\n## References\n\n"

        # Collect all unique resources
        resources = set()
        for module in self.learning_path:
            for resource in module['resources']:
                if resource['source_type'] == 'academic':
                    resources.add(f"{resource['authors']} ({resource['year']}). {resource['title']}. {resource['journal']}. DOI:{resource['doi']}")
                elif resource['source_type'] == 'video':
                    resources.add(f"{resource['channel']}. {resource['title']}. YouTube. Available at: {resource['url']}")
                else:  # web
                    resources.add(f"{resource['title']}. Available at: {resource['url']}")

        for ref in sorted(resources):
            footer += f"- {ref}\n"

        return footer

    def generate_report(self):
        """Generate the complete report"""
        self.report = self._generate_header()
        self.report += self._generate_toc()

        for module in self.learning_path:
            self.report += self._generate_module_content(module)

        self.report += self._generate_footer()
        return self.report

    def display_report(self):
        """Display the report in notebook"""
        display(Markdown(self.report))

# %%
# Generate and display the report
report_generator = LearningReportGenerator(learning_path, user_profile)
report = report_generator.generate_report()
report_generator.display_report()

# %% [markdown]
# ## Step 6: Follow-up and Feedback System

# %%
def handle_followup(learning_path, user_profile):
    """Handle user follow-up questions and modify content"""
    print("\n\n## Follow-up and Feedback")
    print("You can now ask questions or provide feedback to improve your learning experience.")

    while True:
        action = input("\nWould you like to: (1) Ask a question, (2) Request clarification, (3) Suggest improvements, or (4) Finish? ")

        if action == '4':
            print("\nThank you for using the Self-Directed Learning Assistant!")
            print("Your final report has been updated with all your feedback.")
            break

        if action == '1':
            question = input("\nWhat is your question about the content? ")
            print(f"\nAnswer: Based on our research about {user_profile['topic']}, {fake.paragraph(nb_sentences=3)}")

            # Add question to relevant module
            if learning_path:
                last_module = learning_path[-1]
                if 'qna' not in last_module:
                    last_module['qna'] = []
                last_module['qna'].append({
                    'question': question,
                    'answer': fake.paragraph(nb_sentences=2)
                })

        elif action == '2':
            unclear_part = input("\nWhich part would you like clarified? ")
            print(f"\nClarification: {fake.paragraph(nb_sentences=2)}")

            # Add clarification to report
            for module in learning_path:
                if unclear_part.lower() in module['title'].lower():
                    if 'clarifications' not in module:
                        module['clarifications'] = []
                    module['clarifications'].append(fake.paragraph(nb_sentences=2))
                    break

        elif action == '3':
            suggestion = input("\nWhat improvement would you suggest? ")
            print("\nThank you for your feedback! We've noted your suggestion.")

            # Could implement more sophisticated modification here
            if 'more examples' in suggestion.lower():
                for module in learning_path:
                    if 'step-by-step examples' not in module['content'][0]:
                        module['content'][0] += f"\n\n#### Additional Example: {fake.sentence(nb_words=6).replace('.', '')}\n\n"
                        module['content'][0] += "1. " + "\n2. ".join(fake.sentences(nb=3)) + "\n3. " + fake.sentence()

        else:
            print("Please enter 1, 2, 3, or 4.")

# %%
# Handle follow-up questions
handle_followup(learning_path, user_profile)

# %% [markdown]
# ## Final Report Export

# %%
def export_report(report):
    """Export the report to a file"""
    from google.colab import files

    # Save as Markdown
    with open("learning_report.md", "w") as f:
        f.write(report)

    # Save as HTML
    import markdown
    html = markdown.markdown(report)
    with open("learning_report.html", "w") as f:
        f.write(f"<html><body>{html}</body></html>")

    print("\nReport exported in multiple formats:")
    files.download("learning_report.md")
    files.download("learning_report.html")

# %%
# Export the final report
export_report(report)

# %% [markdown]
# ## How to Use This System
#
# 1. Run all cells to initialize the system
# 2. When prompted, enter your learning topic and objectives
# 3. Answer the follow-up questions to personalize your experience
# 4. Review the generated learning report
# 5. Use the follow-up system to ask questions or request improvements
# 6. Download your final report in Markdown or HTML format

# %% [markdown]
# ## Implementation Notes
#
# - This is a simulated system that generates realistic educational content
# - In a production environment, you would:
#   - Replace the fake content generation with real API calls to:
#     - Google Scholar/ResearchGate for academic papers
#     - YouTube API for video transcripts
#     - Web search APIs for web content
#   - Add user authentication to save progress
#   - Implement more sophisticated NLP for question answering
# - The current simulation demonstrates the full workflow and capabilities

print("\nLearning session complete! You can now review your personalized learning report above.")